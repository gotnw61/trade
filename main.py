# -*- coding: utf-8 -*-
import asyncio
import os
import json
import traceback
import base58
from datetime import datetime, timezone
import tkinter as tk
from tkinter import ttk, scrolledtext
from solders.keypair import Keypair
from solders.pubkey import Pubkey
from loguru import logger

from gotnw_tradebot.config import (
    trade_settings, open_windows, STATE_FILE, LOG_PATH, 
    STRATEGY_PROFILES, current_strategy, INPUT_FILE, APP_ROOT
)
from gotnw_tradebot.utils import (
    animated_text, log_to_file, print_wallet_info, 
    check_night_mode_transition, get_sol_price
)
from gotnw_tradebot.wallet import wallet_manager, get_available_balance, async_input, WalletManager
from gotnw_tradebot.core import TradeBot
from gotnw_tradebot.analysis import EnhancedTokenAnalyzer, TokenAnalyzer
from gotnw_tradebot.gui import start_gui

# ƒ∞≈ülenen mint adreslerini takip eden set
processed_mints = set()
last_processed_time = 0

async def save_state(trade_bot):
    """Mevcut bot durumunu kaydetme fonksiyonu"""
    try:
        wallet_data = []
        for wallet in trade_bot.wallet.wallets:
            keypair = wallet["keypair"]
            wallet_data.append({
                "pubkey": str(keypair.pubkey()),
                "private_key": base58.b58encode(keypair.secret()).decode('utf-8'),
                "connected": wallet["connected"]
            })
        
        state = {
            "positions": trade_bot.positions,
            "settings": trade_settings,
            "first_seen_mints": {mint: ts.strftime('%Y-%m-%d %H:%M:%S') for mint, ts in trade_bot.first_seen_mints.items()},
            "past_trades": trade_bot.past_trades,
            "current_strategy": current_strategy,
            "wallets": wallet_data,
            "active_wallet_index": trade_bot.wallet.active_wallet_index,
            "processed_mints": list(trade_bot.processed_mints)
        }
        with open(STATE_FILE, 'w', encoding='utf-8') as f:
            json.dump(state, f, indent=2, default=str)
        animated_text("üíæ Durum ba≈üarƒ±yla kaydedildi")
        logger.info(f"Kaydedilen c√ºzdan sayƒ±sƒ±: {len(wallet_data)}")
        if wallet_data:
            logger.info(f"√ñrnek c√ºzdan: {wallet_data[0]['pubkey']}")
    except Exception as e:
        log_to_file(f"‚ùå Durum kaydedilemedi: {e}")
        logger.error(f"Durum kaydedilemedi: {e}")
        traceback.print_exc()

async def load_state(trade_bot):
    """Kaydedilmi≈ü bot durumunu y√ºkleme fonksiyonu"""
    try:
        global trade_settings, current_strategy
        
        if not os.path.exists(STATE_FILE):
            animated_text(f"‚ö†Ô∏è Kaydedilmi≈ü durum bulunamadƒ±, varsayƒ±lan ayarlar kullanƒ±lƒ±yor")
            logger.warning("Durum dosyasƒ± bulunamadƒ±")
            return
            
        with open(STATE_FILE, 'r', encoding='utf-8') as f:
            state = json.load(f)
        
        logger.info("Durum dosyasƒ± ba≈üarƒ±yla okundu.")
            
        if "positions" in state:
            trade_bot.positions = state["positions"]
            
        if "settings" in state:
            trade_settings.update(state["settings"])
            
        if "first_seen_mints" in state:
            try:
                trade_bot.first_seen_mints = {mint: datetime.strptime(ts, '%Y-%m-%d %H:%M:%S') for mint, ts in state["first_seen_mints"].items()}
            except ValueError:
                trade_bot.first_seen_mints = {mint: datetime.fromisoformat(ts) for mint, ts in state["first_seen_mints"].items()}
                                      
        if "past_trades" in state:
            for trade in state["past_trades"]:
                if isinstance(trade["timestamp"], str):
                    try:
                        trade["timestamp"] = datetime.strptime(trade["timestamp"], '%Y-%m-%d %H:%M:%S')
                    except ValueError:
                        trade["timestamp"] = datetime.fromisoformat(trade["timestamp"])
            trade_bot.past_trades = state["past_trades"]
            
        if "current_strategy" in state:
            current_strategy = state["current_strategy"]
        
        if "processed_mints" in state:
            trade_bot.processed_mints = set(state["processed_mints"])
        
        if "wallets" in state and "active_wallet_index" in state:
            logger.info(f"C√ºzdan verileri bulundu. Y√ºklenecek c√ºzdan sayƒ±sƒ±: {len(state['wallets'])}")
            try:
                wallet_manager.wallets = []
                wallet_manager.active_wallet_index = -1
                
                for wallet_data in state["wallets"]:
                    try:
                        seed_bytes = base58.b58decode(wallet_data["private_key"])
                        keypair = Keypair.from_seed(seed_bytes[:32])
                        wallet_manager.wallets.append({
                            "keypair": keypair,
                            "connected": wallet_data.get("connected", True)
                        })
                        logger.info(f"C√ºzdan y√ºklendi: {keypair.pubkey()}")
                    except Exception as e:
                        log_to_file(f"C√ºzdan y√ºkleme hatasƒ±: {e}")
                        logger.error(f"C√ºzdan y√ºkleme hatasƒ±: {e}")
                        traceback.print_exc()
                
                if wallet_manager.wallets:
                    active_index = state["active_wallet_index"]
                    if 0 <= active_index < len(wallet_manager.wallets):
                        wallet_manager.active_wallet_index = active_index
                        logger.info(f"Aktif c√ºzdan ayarlandƒ±: {wallet_manager.wallets[active_index]['keypair'].pubkey()}")
                        animated_text(f"Aktif c√ºzdan: {wallet_manager.wallets[active_index]['keypair'].pubkey()}")
                    else:
                        logger.warning(f"Ge√ßersiz aktif c√ºzdan indeksi: {active_index}")
                else:
                    logger.warning("C√ºzdanlar y√ºklendi ancak liste bo≈ü.")
            except Exception as e:
                log_to_file(f"C√ºzdan y√ºkleme ana hatasƒ±: {e}")
                logger.error(f"C√ºzdan y√ºkleme ana hatasƒ±: {e}")
                traceback.print_exc()
        else:
            logger.warning("Durum dosyasƒ±nda c√ºzdan verileri bulunamadƒ±.")
            
        animated_text("üìÇ Durum ba≈üarƒ±yla y√ºklendi")
    except Exception as e:
        log_to_file(f"‚ùå Durum y√ºklenemedi: {e}")
        logger.error(f"Durum y√ºklenemedi: {e}")
        traceback.print_exc()

async def run_tk(root):
    """tkinter ve asyncio'yu entegre eden yardƒ±mcƒ± fonksiyon"""
    while True:
        try:
            root.update()
            await asyncio.sleep(0.01)
        except tk.TclError:
            break

async def start_bot(console_mode=True, gui_mode=False):
    """Bot uygulamasƒ±nƒ± ba≈ülatan ana fonksiyon"""
    # Loguru yapƒ±landƒ±rmasƒ±
    logger.remove()  # Varsayƒ±lan sink'i kaldƒ±r
    logger.add(os.path.join(LOG_PATH, "tradebot.log"), 
              rotation="1 MB", 
              level="DEBUG", 
              format="{time:YYYY-MM-DD HH:mm:ss} | {level} | {message}")
    logger.add(lambda msg: print(msg), level="INFO", format="{message}")
    
    # Klas√∂rleri olu≈ütur
    if not os.path.exists(LOG_PATH):
        os.makedirs(LOG_PATH)
        logger.info(f"Log dizini olu≈üturuldu: {LOG_PATH}")

    animated_text("üöÄ GOTNW TradeBot Ba≈ülatƒ±lƒ±yor...")
    animated_text("‚ÑπÔ∏è Veriler y√ºkleniyor...")

    # Root olu≈ütur
    root = tk.Tk()
    if not gui_mode:
        root.withdraw()  # Konsol aray√ºz√º i√ßin ba≈ülangƒ±√ßta gizle

    # TradeBot olu≈ütur
    trade_bot = TradeBot(root)
    trade_bot.save_state = lambda: save_state(trade_bot)
    trade_bot.load_state = lambda: load_state(trade_bot)
    trade_bot.pending_buys = set()  # pending_buys'ƒ± burada ba≈ülatƒ±yoruz
    
    wallet_manager.trade_bot = trade_bot

    # Durum y√ºklemeyi dene
    try:
        await trade_bot.load_state()
    except Exception as e:
        logger.error(f"Durum y√ºkleme hatasƒ±: {e}")
        animated_text("‚ùå Durum y√ºklenirken hata olu≈ütu, varsayƒ±lan ayarlar kullanƒ±lacak")
        traceback.print_exc()

    # AI Modellerini Y√ºkle
    try:
        from gotnw_tradebot.config import AI_MODEL_FILE
        trade_bot.analyzer.load_models(AI_MODEL_FILE.replace(".pkl", ""))
        animated_text("üß† AI modelleri y√ºklendi")
        
        # AI modelleri yoksa veya d√ºzg√ºn y√ºklenmediyse
        if not hasattr(trade_bot.analyzer.isolation_forest, "_fitted") or not getattr(trade_bot.analyzer.isolation_forest, "_fitted", False):
            animated_text("üß† AI modelleri hen√ºz eƒüitilmemi≈ü, otomatik eƒüitim ba≈ülatƒ±lƒ±yor...")
            
            # Yeterli veri yoksa AI √∂zelliklerini devre dƒ±≈üƒ± bƒ±rak
            if len(trade_bot.analyzer.price_history) < 10:
                animated_text("‚ö†Ô∏è AI √∂zellikleri i√ßin yeterli veri yok, √∂zellikler ge√ßici olarak devre dƒ±≈üƒ±")
                trade_settings["ai_enabled"] = False
            else:
                # Modelleri eƒüitmeyi dene
                try:
                    pump_success = trade_bot.analyzer.train_pump_detection_model()
                    duration_success = trade_bot.analyzer.train_pump_duration_model()
                    price_success = trade_bot.analyzer.train_price_prediction_model()
                    
                    if pump_success or duration_success or price_success:
                        animated_text("‚úÖ AI modelleri ba≈üarƒ±yla eƒüitildi!")
                    else:
                        animated_text("‚ö†Ô∏è AI modelleri eƒüitilemedi, veriler zamanla toplanacak")
                        trade_settings["ai_enabled"] = False
                except Exception as e:
                    log_to_file(f"AI model eƒüitimi hatasƒ±: {e}")
                    logger.error(f"AI model eƒüitimi hatasƒ±: {e}")
                    animated_text("‚ö†Ô∏è AI model eƒüitimi ba≈üarƒ±sƒ±z, √∂zellikler ge√ßici olarak devre dƒ±≈üƒ±")
                    trade_settings["ai_enabled"] = False
    except Exception as e:
        logger.error(f"AI mod√ºlleri y√ºklenemedi: {e}")
        animated_text("‚ÑπÔ∏è AI modelleri bulunamadƒ±, yeni model eƒüitilebilir")

    # G√∂revleri olu≈ütur
    tasks = []
    
    # GUI i√ßin g√∂revler
    if gui_mode:
        start_gui(trade_bot)
    else:
        tasks.append(asyncio.create_task(run_tk(root)))
    
    # Temel g√∂revler
    tasks.extend([
        asyncio.create_task(trade_bot.monitor_positions()),
        asyncio.create_task(monitor_filtered_messages(trade_bot)),
        asyncio.create_task(auto_clear_console(trade_bot))
    ])

    # ƒ∞steƒüe baƒülƒ± g√∂revler
    if trade_settings["rapid_cycle_enabled"]:
        animated_text("‚ö° Hƒ±zlƒ± d√∂ng√º ba≈ülatƒ±lƒ±yor...")
        tasks.append(asyncio.create_task(trade_bot.start_rapid_cycle()))

    # WebSocket ba≈ülat
    tasks.append(asyncio.create_task(trade_bot.start_enhanced_websocket()))
    await trade_bot.add_websocket_token("So11111111111111111111111111111111111111112")
    
    check_night_mode_transition()

    # Ba≈ülatma tamamlandƒ±
    animated_text("‚úÖ TradeBot ba≈ülatƒ±ldƒ±!")
    if console_mode:
        animated_text("\n‚ÑπÔ∏è Komutlar:")
        animated_text("- token [mint_address]: Token'ƒ± izlemeye ba≈üla")
        animated_text("- buy [mint_address] [amount_sol]: Token satƒ±n al")
        animated_text("- close [mint_address]: Pozisyonu kapat")
        animated_text("- menu: Men√ºy√º g√∂ster")
        animated_text("- exit: Programƒ± kapat")
        animated_text("- q: A√ßƒ±k pencereyi/pozisyonu kapat")
        animated_text("- 24: GUI aray√ºz√ºn√º ba≈ülat")
    
    # Ekran bilgilerini g√ºncelle
    await update_display(trade_bot)
    
    # Konsol modu aktifse komut dinlemeye ba≈üla
    if console_mode:
        await console_command_loop(trade_bot, tasks, root)
    else:
        # Sadece g√∂revleri bekleriz
        await asyncio.gather(*tasks)

async def console_command_loop(trade_bot, tasks, root):
    """Konsol komutlarƒ±nƒ± i≈üleyen d√∂ng√º"""
    while True:
        command = (await async_input("\n> ")).strip().lower()

        if command == "exit":
            animated_text("üëã Programdan √ßƒ±kƒ±lƒ±yor...")
            logger.info("Programdan √ßƒ±kƒ±lƒ±yor...")
            for task in tasks:
                task.cancel()
            if trade_bot.websocket_active:
                await trade_bot.stop_websocket()
            root.destroy()
            break

        elif command == "menu":
            await trade_bot.display_menu()
            await update_display(trade_bot)

        elif command.startswith("token "):
            mint_address = command.split("token ")[1].strip()
            await trade_bot.add_websocket_token(mint_address)
            await update_display(trade_bot)

        elif command.startswith("buy "):
            parts = command.split("buy ")[1].strip().split()
            if len(parts) >= 1:
                mint_address = parts[0]
                amount = float(parts[1]) if len(parts) > 1 else trade_settings["buy_amount_sol"]
                await trade_bot.buy(mint_address, amount, manual=True)
            else:
                animated_text("‚ùå Ge√ßersiz komut! √ñrnek: buy [mint_address] [amount_sol]")
            await update_display(trade_bot)

        elif command.startswith("close "):
            mint_address = command.split("close ")[1].strip()
            if mint_address in trade_bot.positions:
                result = await trade_bot.close_position_manually(mint_address)
                if result:
                    animated_text(f"‚úÖ Pozisyon kapatƒ±ldƒ±: {mint_address}")
                else:
                    animated_text(f"‚ùå Pozisyon kapatƒ±lamadƒ±: {mint_address}")
            else:
                animated_text(f"‚ùå Aktif pozisyon bulunamadƒ±: {mint_address}")
            await update_display(trade_bot)

        elif command == "q":
            if open_windows:
                mint_address = next(iter(open_windows))
                result = await trade_bot.close_position_manually(mint_address)
                if result:
                    animated_text(f"‚úÖ Pozisyon kapatƒ±ldƒ±: {mint_address}")
                elif mint_address in open_windows:
                    open_windows.remove(mint_address)
                    animated_text(f"‚ÑπÔ∏è Pencere kapatƒ±ldƒ±: {mint_address}")
            else:
                animated_text("‚ÑπÔ∏è A√ßƒ±k pencere veya pozisyon yok")
            await update_display(trade_bot)

        elif command in ["gui", "24"]:
            animated_text("GUI aray√ºz√º ba≈ülatƒ±lƒ±yor...")
            start_gui(trade_bot)
            await update_display(trade_bot)

        elif command == "new":
            animated_text("Yeni sade mod ba≈ülatƒ±lƒ±yor...")
            logger.info("Yeni sade mod ba≈ülatƒ±lƒ±yor")
            for task in tasks:
                task.cancel()
            if trade_bot.websocket_active:
                await trade_bot.stop_websocket()
            root.destroy()
            await new_main()
            break

        elif command.strip():
            animated_text(f"‚ùå Tanƒ±nmayan komut: {command}")

async def update_display(trade_bot):
    """C√ºzdan bilgilerini ekranda g√∂sterir"""
    try:
        sol_price = await get_sol_price() or 0
        balance = await wallet_manager.get_balance()
        current_wallet = "Baƒülƒ± deƒüil" if wallet_manager.active_wallet_index == -1 else str(wallet_manager.wallets[wallet_manager.active_wallet_index]["keypair"].pubkey())
        print_wallet_info(current_wallet, balance, sol_price)
    except Exception as e:
        log_to_file(f"Ekran g√ºncelleme hatasƒ±: {e}")
        logger.error(f"Ekran g√ºncellenemedi: {e}")

async def monitor_filtered_messages(trade_bot):
    """INPUT_FILE dosyasƒ±nƒ± izler ve yeni tokenlarƒ± i≈ülemeye alƒ±r"""
    # Mevcut monitor_filtered_messages fonksiyonunun i√ßeriƒüini buraya kopyalayƒ±n

async def auto_clear_console(trade_bot):
    """10 dakikada bir konsolu temizler ve sadece c√ºzdan bilgilerini g√∂sterir"""
    # Mevcut auto_clear_console fonksiyonunun i√ßeriƒüini buraya kopyalayƒ±n

async def new_main():
    """Yeni ana fonksiyon - loguru kullanƒ±r ve daha sade yapƒ±dadƒ±r"""
    logger.add("tradebot.log", rotation="1 MB")
    logger.info("Bot ba≈ülatƒ±lƒ±yor...")
    try:
        wallet_mgr = WalletManager()
        trade_bot = TradeBot(None)  # GUI olmadan ba≈ülatma
        token_analyzer = TokenAnalyzer()
        await asyncio.gather(
            token_analyzer.start_pool_detection(),
            trade_bot.start_auto_buy()
        )
    except Exception as e:
        logger.error(f"Bot ba≈ülatma hatasƒ±: {e}")

def start_application(console_mode=True, gui_mode=False):
    """Uygulamayƒ± ba≈ülatan ana fonksiyon"""
    try:
        asyncio.run(start_bot(console_mode, gui_mode))
    except Exception as e:
        print(f"Uygulama ba≈ülatma hatasƒ±: {e}")
        import traceback
        traceback.print_exc()
        input("Devam etmek i√ßin bir tu≈üa basƒ±n...")

if __name__ == "__main__":
    start_application(console_mode=True)